// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id          Int          @id @default(autoincrement())
  name        String
  email       String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  restaurants Restaurant[]
  orders      Order[]
}

model Restaurant {
  id          Int        @id @default(autoincrement())
  name        String
  address     String
  cuisineType String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  customers   Customer[]
  items       Item[]
  orders      Order[]
}

model Item {
  id           Int         @id @default(autoincrement())
  name         String
  price        Float
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  restaurantId Int
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  orderItems   OrderItem[]
}

model Order {
  id           Int         @id @default(autoincrement())
  totalPrice   Float       @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  customerId   Int
  customer     Customer    @relation(fields: [customerId], references: [id])
  restaurantId Int
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  orderItems   OrderItem[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  itemId    Int
  item      Item     @relation(fields: [itemId], references: [id])
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                  Int                  @id @default(autoincrement())
  username            String               @unique
  password            String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  activeRefreshTokens ActiveRefreshToken[]
}

model ActiveRefreshToken {
  jti       String   @unique
  sub       Int
  expiresAt DateTime
  user      User     @relation(fields: [sub], references: [id], onDelete: Cascade)
}
